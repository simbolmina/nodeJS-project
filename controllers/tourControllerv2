const Tour = require('./../models/tourModel');
const APIFeatures = require('./../utils/apiFeatures');
const catchAsync = require('./../utils/catchAsync');

exports.aliasTopTours = (req, res, next) => {
  req.query.limit = '5';
  req.query.sort = '-ratingsAverage,price';
  req.query.fields = 'name,price,ratingsAverage,summary,difficulty';
  next();
};

exports.getAllTours = catchAsync(async (req, res, next) => {
  const features = new APIFeatures(Tour.find(), req.query)
    .filter()
    .sort()
    .limitFields()
    .pagination();
  const tours = await features.query;
  //we do this cuz queries are also async or takes time.

  //send response
  res.status(200).json({
    status: 'success',
    results: tours.length,
    data: {
      tours,
    },
  });
  // try {
  //   //built query without changin original query and exlude some key features
  //   // const queryObj = { ...req.query };
  //   // const exludedFields = ['page', 'sort', 'limit', 'fields'];
  //   // exludedFields.forEach((el) => delete queryObj[el]);
  //   // // const tours = await Tour.find();
  //   // console.log(req.query);
  //   // let queryStr = JSON.stringify(queryObj);
  //   // queryStr = queryStr.replace(/\b(gte|gt|lte|lt\b)/g, (match) => `$${match}`);
  //   // // console.log(JSON.parse(queryStr));

  //   // let query = Tour.find(JSON.parse(queryStr));

  //   //sorting
  //   // if (req.query.sort) {
  //   //   const sortBy = req.query.sort.split(',').join(' ');
  //   //   console.log(sortBy);
  //   //   query = query.sort(sortBy);
  //   // } else {
  //   //   query = query.sort('-createdAt');
  //   // }

  //   // field limiter

  //   // if (req.query.fields) {
  //   //   const fields = req.query.fields.split(',').join(' ');
  //   //   query = query.select(fields);
  //   // } else {
  //   //   query = query.select('-__v'); //exluding this field
  //   // }

  //   // pagination
  //   // const page = req.query.page * 1 || 1;
  //   // const limit = req.query.limit * 1 || 100;
  //   // const skip = (page - 1) * limit;
  //   // //orn 3.sayfa isteniyor. 3-1 * 10 = 20 eder. 20 sonuc atlanaak ve 3. sayfa 21den baslayaak
  //   // //page=2%limit10 means 1-10 page 1, 11-20 page 2,
  //   // query = query.skip(skip).limit(limit);
  //   //when reaching last line of code
  //   // if (req.query.page) {
  //   //   const numTours = await Tour.countDocuments();
  //   //   if (skip >= numTours) throw new Error('This page does not exist');
  //   // }

  //   //execute query
  //   // const features = new APIFeatures(Tour.find(), req.query)
  //   //   .filter()
  //   //   .sort()
  //   //   .limitFields()
  //   //   .pagination();
  //   // const tours = await features.query;
  //   // //we do this cuz queries are also async or takes time.

  //   // //send response
  //   // res.status(200).json({
  //   //   status: 'success',
  //   //   results: tours.length,
  //   //   data: {
  //   //     tours,
  //   //   },
  //   // });
  // } catch (err) {
  //   res.status(404).json({
  //     status: 'fail',
  //     message: err,
  //   });
  // }
});

exports.getTour = catchAsync(async (req, res, next) => {
  const tour = await Tour.findById(req.params.id);
  // findById is actually findOne with sugarcode
  res.status(200).json({
    status: 'success',
    data: {
      tour,
    },
  });
  // try {
  //   const tour = await Tour.findById(req.params.id);
  //   // findById is actually findOne with sugarcode
  //   res.status(200).json({
  //     status: 'success',
  //     data: {
  //       tour,
  //     },
  //   });
  // } catch (err) {
  //   res.status(400).json({
  //     status: 'fail',
  //     message: err,
  //   });
  // }
});

exports.createTour = catchAsync(async (req, res, next) => {
  const newTour = await Tour.create(req.body);
  res.status(201).json({
    status: 'success',
    data: {
      tour: newTour,
    },
  });
  // try {
  //   const newTour = await Tour.create(req.body);
  //   res.status(201).json({
  //     status: 'success',
  //     data: {
  //       tour: newTour,
  //     },
  //   });
  // } catch (err) {
  //   res.status(400).json({
  //     status: 'fail',
  //     message: err,
  //   });
  // }
});

exports.updateTour = catchAsync(async (req, res, next) => {
  const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
    new: true, //we want this func to returen new doc
    runValidators: true,
  });
  res.status(200).json({
    status: 'success',
    data: {
      tour,
    },
  });
  // try {
  //   const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
  //     new: true, //we want this func to returen new doc
  //     runValidators: true,
  //   });
  //   res.status(200).json({
  //     status: 'success',
  //     data: {
  //       tour,
  //     },
  //   });
  // } catch (err) {
  //   res.status(400).json({
  //     status: 'fail',
  //     message: err,
  //   });
  // }
});

exports.deleteTour = catchAsync(async (req, res, next) => {
  await Tour.findByIdAndDelete(req.params.id);
  res.status(204).json({
    status: 'success',
    data: null,
  });
  // try {
  //   res.status(204).json({
  //     status: 'success',
  //     data: null,
  //   });
  // } catch (err) {
  //   res.status(400).json({
  //     status: 'fail',
  //     message: err,
  //   });
  // }
});

/// PIPELINE ///

exports.getTourStats = catchAsync(async (req, res, next) => {
  const stats = await Tour.aggregate([
    //aggregate is to get statics of db objects
    {
      $match: { ratingsAvarage: { $gte: 4.5 } },
    },
    {
      $group: {
        _id: { $toUpper: '$difficulty' }, //to group fields
        numTours: { $sum: 1 }, //for each tour 1 will be added
        numRatings: { $sum: '$ratingsQuantity' },
        avgRating: { $avg: '$ratingsAvarage' },
        avgPrice: { $avg: '$price' },
        minPrice: { $min: '$price' },
        maxPrice: { $max: '$price' },
      },
    },
    {
      $sort: { avgPrice: 1 },
    },
  ]);
  res.status(200).json({
    status: 'success',
    data: {
      stats,
    },
  });
  // try {
  //   const stats = await Tour.aggregate([
  //     //aggregate is to get statics of db objects
  //     {
  //       $match: { ratingsAvarage: { $gte: 4.5 } },
  //     },
  //     {
  //       $group: {
  //         _id: { $toUpper: '$difficulty' }, //to group fields
  //         numTours: { $sum: 1 }, //for each tour 1 will be added
  //         numRatings: { $sum: '$ratingsQuantity' },
  //         avgRating: { $avg: '$ratingsAvarage' },
  //         avgPrice: { $avg: '$price' },
  //         minPrice: { $min: '$price' },
  //         maxPrice: { $max: '$price' },
  //       },
  //     },
  //     {
  //       $sort: { avgPrice: 1 },
  //       //trick is property names changes after each section. so we use upper ones
  //     },
  //     // {
  //     //   $match: { _id: { $ne: 'EASY' } }, //ne - not equal and id is now difficulty
  //     // },
  //   ]);
  //   res.status(200).json({
  //     status: 'success',
  //     data: {
  //       stats,
  //     },
  //   });
  // } catch (err) {
  //   res.status(400).json({
  //     status: 'fail',
  //     message: err,
  //   });
  // }
});

exports.getMonthlyPlan = catchAsync(async (req, res, next) => {
  const year = req.params.year * 1;

  const plan = await Tour.aggregate([
    {
      $unwind: '$startDates',
    },
    {
      $match: {
        startDates: {
          $gte: new Date(`${year}-01-01`),
          $lte: new Date(`${year}-12-31`),
        },
      },
    },
    {
      $group: {
        _id: { $month: '$startDates' },
        numTourStarts: { $sum: 1 },
        tours: { $push: '$name' },
      },
    },
    {
      $addFields: { month: '$_id' },
    },
    {
      $project: {
        _id: 0, // 1 is show, 0 is hide parameter
      },
    },
    {
      $sort: {
        numTourStarts: -1, // 1 us ascebdubg -1 us descebdubg
      },
    },
    {
      $limit: 12, //limit output document count
    },
  ]);

  res.status(200).json({
    status: 'success',
    data: {
      plan,
    },
  });
  // try {
  //   const year = req.params.year * 1;

  //   const plan = await Tour.aggregate([
  //     {
  //       $unwind: '$startDates',
  //     },
  //     {
  //       $match: {
  //         startDates: {
  //           $gte: new Date(`${year}-01-01`),
  //           $lte: new Date(`${year}-12-31`),
  //         },
  //       },
  //     },
  //     {
  //       $group: {
  //         _id: { $month: '$startDates' },
  //         numTourStarts: { $sum: 1 },
  //         tours: { $push: '$name' },
  //       },
  //     },
  //     {
  //       $addFields: { month: '$_id' },
  //     },
  //     {
  //       $project: {
  //         _id: 0, // 1 is show, 0 is hide parameter
  //       },
  //     },
  //     {
  //       $sort: {
  //         numTourStarts: -1, // 1 us ascebdubg -1 us descebdubg
  //       },
  //     },
  //     {
  //       $limit: 12, //limit output document count
  //     },
  //   ]);

  //   res.status(200).json({
  //     status: 'success',
  //     data: {
  //       plan,
  //     },
  //   });
  // } catch (err) {
  //   res.status(400).json({
  //     status: 'fail',
  //     message: err,
  //   });
  // }
});
